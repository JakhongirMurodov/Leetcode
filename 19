# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        """        
        #1. Instantiate the fast and slow runner
        #2. fast runner moves n steps ahead of the slow runner
        #3. Meanwhile, the fast runner reaches the end, slow runner will be at the prev node of the target node.
        #4. Then we just delete the target node and return the head the of the LL.
        
        # step_1
        slow = fast = head
        
        # step_2
        for i in range(n):
            fast = fast.next
            
        # step_3            
        while fast and fast.next:
            slow = slow.next
            fast = fast.next
        
        # step_4
        if fast:
            slow.next = slow.next.next
        else:
            head = head.next
        
        return head"""
    
    
    
        fast = head
        
        for _ in range(n):
            fast = fast.next
            
        if not fast:
            return head.next
        
        slow = head
        
        while fast.next:
            fast = fast.next
            slow = slow.next
        
        slow.next = slow.next.next
        
        return head
